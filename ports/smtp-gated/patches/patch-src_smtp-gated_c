Index: src/smtp-gated.c
--- src/smtp-gated.c.orig
+++ src/smtp-gated.c
@@ -7,7 +7,7 @@
  *	(c) Warszawa 2004-2005
  *	GNU GPL License
  *
- *	Copyright (C) 2004-2005 Bart³omiej Korupczynski <bartek@klolik.org>
+ *	Copyright (C) 2004-2005 Bartï¿½omiej Korupczynski <bartek@klolik.org>
  *
  *	This program is free software; you can redistribute it and/or 
  *	modify it under the terms of the GNU General Public License 
@@ -479,7 +479,7 @@ void queue_commandp(smtp_command_t command, struct ses
 		pipeline_full(data);
 } /* queue_commandp() */
 
-inline void queue_command(smtp_command_t command, struct session_t *data)
+static inline void queue_command(smtp_command_t command, struct session_t *data)
 {
 	return queue_commandp(command, data, arg_t_p(NULL), arg_t_p(NULL));
 } /* queue_command() */
@@ -964,8 +964,8 @@ void wait_for_quit(struct session_t* data, char* forma
 	va_end(ap);
 
 	SHARED_CONN_STATUS(state, CONN_QUIT);
-	log_action(LOG_WARNING, "SESSION TAKEOVER: src=%s, ident=%s, trns=%d, reason=%s",
-		data->origin_str, data->ident, data->transaction, data->message);
+	log_action(LOG_WARNING, "SESSION TAKEOVER: src=%s, ident=%s, trns=%d, reason=%s, user=%s",
+		data->origin_str, data->ident, data->transaction, data->message, data->sslproxy_user);
 
 	cli_size = 0;
 	SET_TIMEOUT(config.timeout_session);
@@ -1204,7 +1204,7 @@ void destroy_rcpt_to(struct session_t *data)
 	data->rcpts = 0;
 } /* destroy_rcpt_to() */
 
-inline void destroy_addresses(struct session_t *data)
+static inline void destroy_addresses(struct session_t *data)
 {
 	destroy_mail_from(data);
 	destroy_rcpt_to(data);
@@ -1220,8 +1220,8 @@ void flush_addresses(struct session_t *data)
 			data->mail_from_logged = 1;
 			return;
 		} else {
-			log_action(LOG_INFO|LOG_ALWAYS, "MAIL FROM <%s> RCPT TO: %03d<%s>", 
-				data->mail_from, data->rcpt_to_code[0], data->rcpt_to[0]);
+			log_action(LOG_INFO|LOG_ALWAYS, "MAIL FROM <%s> RCPT TO: %03d<%s>, user=%s", 
+				data->mail_from, data->rcpt_to_code[0], data->rcpt_to[0], data->sslproxy_user);
 			data->mail_from_logged = 1;
 			
 			free(data->rcpt_to[0]);
@@ -1270,7 +1270,7 @@ void new_mail_from(struct session_t *data, char *email
 		return;
 
 	if (!accepted) {
-		log_action(LOG_NOTICE|LOG_ALWAYS, "MAIL FROM <%s> rejected [%d]", email, code);
+		log_action(LOG_NOTICE|LOG_ALWAYS, "MAIL FROM <%s> rejected [%d], user=%s", email, code, data->sslproxy_user);
 //		free(email);
 		return;
 	}
@@ -1968,13 +1968,17 @@ line_status server_callback(char *buffer, char *pos, i
 			break;
 
 		case COMMAND_STARTTLS:
-			if (code == 220) {
-				destroy_addresses(data);
-				if (!IS_FLAG_SET(config.spool_leave_on, LEAVE_ON_ALWAYS))
-					spool_remove(data);
-				direct = "starttls";
+			if (!data->behind_sslproxy) {
+				if (code == 220) {
+					destroy_addresses(data);
+					if (!IS_FLAG_SET(config.spool_leave_on, LEAVE_ON_ALWAYS))
+						spool_remove(data);
+					direct = "starttls";
+				} else {
+					log_action(LOG_DEBUG, "DIRECT:CANCELLED cause=starttls code=%d", code);
+				}
 			} else {
-				log_action(LOG_DEBUG, "DIRECT:CANCELLED cause=starttls code=%d", code);
+				log_action(LOG_DEBUG, "DIRECT:CANCELLED cause=behind_sslproxy code=%d", code);
 			}
 			break;
 
@@ -2210,7 +2214,7 @@ int target_connect(struct session_t *data)
 				SAFE_CLOSE(data->client);
 				exit(0);
 			}
-			data->server = connect_host_from_port(data->target, ntohs(data->target.sin_port), data->origin, ARRAY(int, SO_REUSEADDR, 0), ARRAY(int, IP_TRANSPARENT, 0));
+			data->server = connect_host_from_port(data->actual_target, ntohs(data->actual_target.sin_port), data->origin, ARRAY(int, SO_REUSEADDR, 0), ARRAY(int, IP_TRANSPARENT, 0));
 			res = errno;
 
 			// drop privileges entirely, not needed anymore
@@ -2239,7 +2243,7 @@ int target_connect(struct session_t *data)
 		case MODE_PF:
 		case MODE_REMOTE:
 		case MODE_REMOTE_UDP:
-			data->server = connect_host(data->target, ntohs(data->target.sin_port), src, ARRAY(int, SO_REUSEADDR, 0), NULL);
+			data->server = connect_host(data->actual_target, ntohs(data->actual_target.sin_port), src, ARRAY(int, SO_REUSEADDR, 0), NULL);
 			break;
 		default:
 			log_action(LOG_CRIT, "!BUG! target_connect(): data->mode=%d", data->mode);
@@ -2427,8 +2431,11 @@ void connection(struct session_t *data)
 
 	session_init_2(data);
 
-	// dane serwera docelowego
-	if (!target_lookup(data)) exit(1);
+	if (!data->behind_sslproxy) {
+		// dane serwera docelowego
+		if (!target_lookup(data)) exit(1);
+			data->actual_target = data->target;
+	}
 
 	if (lockfile_ident_present(data)) {
 		SHARED_STATS_INC(rejects_lock);
@@ -2477,9 +2484,9 @@ void connection(struct session_t *data)
 	}
 	
 	// log
-	log_action(LOG_NOTICE|LOG_ALWAYS, "NEW (%d/%d) on=%s:%d, src=%s:%d, ident=%s, dst=%s:%d, id=%" FORMAT_TIME_T ".%" FORMAT_PID_T, 
+	log_action(LOG_NOTICE|LOG_ALWAYS, "NEW (%d/%d) on=%s:%d, src=%s:%d, ident=%s, dst=%s:%d, %s, user=%s, id=%" FORMAT_TIME_T ".%" FORMAT_PID_T, 
 		children, data->ident_count, inet_ntoa(data->local.sin_addr), ntohs(data->local.sin_port), data->origin_str, ntohs(data->origin.sin_port),
-		data->ident, data->target_str, ntohs(data->target.sin_port), data->start_time, getpid());
+		data->ident, data->target_str, ntohs(data->target.sin_port), data->sslproxy_ssl ? "smtps" : "smtp", data->sslproxy_user, data->start_time, getpid());
 
 	// nie bedzie petli?
 	// dla testow wylacz (albo: wlacz jesli !fixed)
@@ -2518,8 +2525,14 @@ void connection(struct session_t *data)
 		// xclient_startup eats initial greeting and forwards it to client directly
 		// so queueing COMMAND_GREETING would confuse pipelining support
 	} else {
-		// not a real command, but we'll get initial greeting from MTA
-		queue_command(COMMAND_GREETING, data);
+		if (!data->saved_line) {
+			// not a real command, but we'll get initial greeting from MTA
+			queue_command(COMMAND_OTHER, data);
+		} else {
+			fdprintf(data->server, "%s\r\n", data->saved_line);
+			free(data->saved_line);
+			data->saved_line = NULL;
+		}
 	}
 
 	// deskryptor dla select-a
@@ -2604,9 +2617,9 @@ void connection(struct session_t *data)
 
 	cleanup();
 
-	log_action(LOG_NOTICE|LOG_ALWAYS, "CLOSE by=%s, rcv=%d/%d, trns=%d, rcpts=%d, auth=%d, time=%" FORMAT_TIME_T ", src=%s, ident=%s",
+	log_action(LOG_NOTICE|LOG_ALWAYS, "CLOSE by=%s, rcv=%d/%d, trns=%d, rcpts=%d, auth=%d, time=%" FORMAT_TIME_T ", src=%s, ident=%s, user=%s",
 		line_closed_cause(res), data->cli_rx, data->srv_rx, data->transaction, data->rcpts_total, data->auth,
-		time(NULL)-data->start_time, data->origin_str, data->ident);
+		time(NULL)-data->start_time, data->origin_str, data->ident, data->sslproxy_user);
 	exit(0);
 } /* connection() */
 
@@ -2957,7 +2970,7 @@ int main(int argc, char* argv[])
 			dump_help();
 			exit(10);
 		case CMD_C:
-			// nie bierze pod uwagê chroot-a w przypadku ¶cie¿ek!
+			// nie bierze pod uwagï¿½ chroot-a w przypadku ï¿½cieï¿½ek!
 			i = dump_config_by_name(arg1, config_options, 0);
 			exit(i);
 		case CMD_KK:
@@ -3136,7 +3149,266 @@ restart:
 		log_action(LOG_WARNING, "MEMLEAK_TESTING defined, allocating bogus %s bytes", MEMLEAK_TESTING);
 		malloc(MEMLEAK_TESTING);
 #endif
+		// free previous context
+		session_free(&data);
+		session_init_1(&data, client, origin);
 
+		char buffer[1024], *line;
+		int bufsize = 0;
+		int offset = 0;
+		data.saved_line = NULL;
+		data.behind_sslproxy = 0;
+		int sslproxy_error = 0;
+
+		SET_TIMEOUT(config.timeout_connect);
+		for (;;) {
+			// fdgetline() returns a NULL-terminated string, replacing '\r' and '\n' with '\0'
+			if ((line = fdgetline(data.client, buffer, sizeof (buffer), &bufsize, &offset)) == NULL) {
+				log_action(LOG_INFO, "Done reading client");
+				break;
+			}
+			// SSLproxy: [127.0.0.1]:34649,[192.168.3.24]:47286,[74.125.206.108]:465,s,soner
+			if (!data.behind_sslproxy && !strncasecmp(line, "SSLproxy:", 9)) {
+				log_action(LOG_DEBUG, line);
+
+				// The checks here cannot cover all possible error conditions
+				// But we should at least avoid crashes, for example caused by passing NULL pointers to str*() functions
+				char *ip_start = strchr(line, '[');
+				if (!ip_start) {
+					log_action(LOG_ERR, "Unable to find sslproxy ip_start: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+				ip_start++;
+
+				char *ip_end = strchr(ip_start, ']');
+				if (!ip_end) {
+					log_action(LOG_ERR, "Unable to find sslproxy ip_end: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+
+				char *port_start = strchr(ip_end, ':');
+				if (!port_start) {
+					log_action(LOG_ERR, "Unable to find sslproxy port_start: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+				port_start++;
+
+				char *port_end = strchr(port_start, ',');
+				if (!port_end) {
+					log_action(LOG_ERR, "Unable to find sslproxy port_end: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+
+				int addr_len = ip_end - ip_start;
+				if (addr_len > MAX_IPADDR_LEN) {
+					log_action(LOG_ERR, "sslproxy addr_len greater than MAX_IPADDR_LEN: %d\n", addr_len);
+					sslproxy_error = 1;
+					break;
+				}
+
+				// We can use addr_len for size restriction here, because we check it against MAX_IPADDR_LEN above
+				char actual_target_str[addr_len + 1];
+				strncpy(actual_target_str, ip_start, addr_len);
+				actual_target_str[addr_len] = '\0';
+				if (inet_pton(AF_INET, actual_target_str, &(data.actual_target.sin_addr)) != 1) {
+					log_action(LOG_ERR, "Cannot inet_pton sslproxy addr: %s\n", actual_target_str);
+					sslproxy_error = 1;
+					break;
+				}
+
+				int port_len = port_end - port_start;
+				if (port_len > MAX_PORT_LEN) {
+					log_action(LOG_ERR, "sslproxy port_len greater than MAX_PORT_LEN: %d\n", port_len);
+					sslproxy_error = 1;
+					break;
+				}
+
+				// @attention Do not use port_len as array size here, because we reuse the port array below possibly with greater port_len
+				char port[MAX_PORT_LEN + 1];
+				// We can use port_len for size restriction here, because we check it against MAX_PORT_LEN above
+				strncpy(port, port_start, port_len);
+				port[port_len] = '\0';
+				data.actual_target.sin_port = htons(atoi(port));
+				
+				ip_start = strchr(port_end, '[');
+				if (!ip_start) {
+					log_action(LOG_ERR, "Unable to find sslproxy src ip_start: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+				ip_start++;
+
+				ip_end = strchr(ip_start, ']');
+				if (!ip_end) {
+					log_action(LOG_ERR, "Unable to find sslproxy src ip_end: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+
+				port_start = strchr(ip_end, ':');
+				if (!port_start) {
+					log_action(LOG_ERR, "Unable to find sslproxy src port_start: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+				port_start++;
+
+				port_end = strchr(port_start, ',');
+				if (!port_end) {
+					log_action(LOG_ERR, "Unable to find sslproxy src port_end: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+
+				addr_len = ip_end - ip_start;
+				if (addr_len > MAX_IPADDR_LEN) {
+					log_action(LOG_ERR, "src addr_len greater than MAX_IPADDR_LEN: %d\n", addr_len);
+					sslproxy_error = 1;
+					break;
+				}
+
+				strncpy(data.origin_str, ip_start, addr_len);
+				data.origin_str[addr_len] = '\0';
+				if (inet_pton(AF_INET, data.origin_str, &(data.origin.sin_addr)) != 1) {
+					log_action(LOG_ERR, "Cannot inet_pton src addr: %s\n", data.origin_str);
+					sslproxy_error = 1;
+					break;
+				}
+
+				port_len = port_end - port_start;
+				if (port_len > MAX_PORT_LEN) {
+					log_action(LOG_ERR, "src port_len greater than MAX_PORT_LEN: %d\n", port_len);
+					sslproxy_error = 1;
+					break;
+				}
+
+				strncpy(port, port_start, port_len);
+				port[port_len] = '\0';
+				data.origin.sin_port = htons(atoi(port));
+				
+				origin = data.origin;
+
+				ip_start = strchr(port_end, '[');
+				if (!ip_start) {
+					log_action(LOG_ERR, "Unable to find sslproxy dst ip_start: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+				ip_start++;
+
+				ip_end = strchr(ip_start, ']');
+				if (!ip_end) {
+					log_action(LOG_ERR, "Unable to find sslproxy dst ip_end: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+
+				port_start = strchr(ip_end, ':');
+				if (!port_start) {
+					log_action(LOG_ERR, "Unable to find sslproxy dst port_start: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+				port_start++;
+
+				port_end = strchr(port_start, ',');
+				if (!port_end) {
+					log_action(LOG_ERR, "Unable to find sslproxy dst port_end: %s\n", line);
+					sslproxy_error = 1;
+					break;
+				}
+
+				addr_len = ip_end - ip_start;
+				if (addr_len > MAX_IPADDR_LEN) {
+					log_action(LOG_ERR, "dst addr_len greater than MAX_IPADDR_LEN: %d\n", addr_len);
+					sslproxy_error = 1;
+					break;
+				}
+
+				strncpy(data.target_str, ip_start, addr_len);
+				data.target_str[addr_len] = '\0';
+				if (inet_pton(AF_INET, data.target_str, &(data.target.sin_addr)) != 1) {
+					log_action(LOG_ERR, "Cannot inet_pton dst addr: %s\n", data.target_str);
+					sslproxy_error = 1;
+					break;
+				}
+
+				port_len = port_end - port_start;
+				if (port_len > MAX_PORT_LEN) {
+					log_action(LOG_ERR, "dst port_len greater than MAX_PORT_LEN: %d\n", port_len);
+					sslproxy_error = 1;
+					break;
+				}
+
+				strncpy(port, port_start, port_len);
+				port[port_len] = '\0';
+				data.target.sin_port = htons(atoi(port));
+
+				char *ssl_start = port_end + 1;
+				char *ssl_end = strchr(ssl_start, ',');
+				int ssl_len = 0;
+				if (ssl_end) {
+					// There is user info at the end
+					ssl_len = ssl_end - ssl_start;
+
+					char *user = ssl_end + 1;
+
+					// It is safe to use strlen() here, because fdgetline() trims the \r\n at the end of line
+					int user_len = strlen(user);
+					if (user_len > MAX_USER_LEN) {
+						log_action(LOG_ERR, "user_len greater than MAX_USER_LEN: %d\n", user_len);
+						sslproxy_error = 1;
+						break;
+					}
+
+					// We can use user_len for size restriction here, because we check it against MAX_USER_LEN above
+					strncpy(data.sslproxy_user, user, user_len);
+					data.sslproxy_user[user_len] = '\0';
+				} else {
+					// It is safe to use strlen() here, because fdgetline() trims the \r\n at the end of line
+					ssl_len = strlen(ssl_start);
+
+					strncpy(data.sslproxy_user, "Unknown", 7);
+					data.sslproxy_user[7] = '\0';
+				}
+
+				if (ssl_len != 1) {
+					log_action(LOG_ERR, "ssl_len not 1: %d\n", ssl_len);
+					sslproxy_error = 1;
+					break;
+				}
+
+				if (ssl_start[0] != 'p' && ssl_start[0] != 's') {
+					log_action(LOG_ERR, "ssl char not p/s: %c\n", ssl_start[0]);
+					sslproxy_error = 1;
+					break;
+				}
+
+				data.sslproxy_ssl = ssl_start[0] = 's' ? 1 : 0;
+
+				// Successfully parsed the SSLproxy line, so we are behind an SSLproxy
+				data.behind_sslproxy = 1;
+			} else {
+				// @attention Client should not send multiple lines after 220, so grab the first one and continue.
+				//log_action(LOG_DEBUG, "Client said: %s", line);
+				data.saved_line = strdup(line);
+				break;
+			}
+		}
+		CLEAR_TIMEOUT();
+
+		if (sslproxy_error) {
+			log_action(LOG_INFO, "SSLproxy error in connection from %s:%d", inet_ntoa(origin.sin_addr), ntohs(origin.sin_port));
+			fdprintf(client, "%03d %s %s\n", CONN_REJ_CODE, config.proxy_name, "SSLproxy error");
+			SAFE_CLOSE(client);
+			stats->rejects_other++;
+			continue;
+		}
+
 		/* fast DoS checks */
 		if (children >= max_connections_real) {
 			log_action(LOG_INFO, "Rejecting (%d) connection from %s:%d", children, inet_ntoa(origin.sin_addr), ntohs(origin.sin_port));
@@ -3168,9 +3440,11 @@ restart:
 			}
 		}
 
-		// free previous context
-		session_free(&data);
-		session_init_1(&data, client, origin);
+		if (data.behind_sslproxy && data.lockfile) {
+			// Reinit the lockfile, if previously set
+			if (asprintf(&data.lockfile, "%s/%s", config.lock_path, data.origin_str) == -1)
+				data.lockfile = NULL;
+		}
 
 		// count is equal to number of connection coming from the same IP, except the current one
 		if (count >= config.max_per_host) {
